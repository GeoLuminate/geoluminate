# Generated by Django 5.0.7 on 2024-08-07 14:51

import django.db.models.deletion
import django_bleach.models
import geoluminate.contrib.samples.choices
import research_vocabs.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('measurements', '0001_initial'),
        ('samples', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomSample',
            fields=[
                ('basesample_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='samples.basesample')),
                ('feature_type', research_vocabs.fields.ConceptField(default='site', verbose_name='feature', vocabulary=geoluminate.contrib.samples.choices.FeatureType)),
                ('medium', research_vocabs.fields.ConceptField(default='solid', verbose_name='medium', vocabulary=geoluminate.contrib.samples.choices.SamplingMedium)),
                ('specimen_type', research_vocabs.fields.ConceptField(default='theSpecimenTypeIsUnknown', verbose_name='specimen', vocabulary=geoluminate.contrib.samples.choices.SpecimenType)),
                ('char_field', models.CharField(help_text='Enter a string of up to 200 characters.', max_length=200, verbose_name='Character Field')),
                ('text_field', django_bleach.models.BleachField(help_text='Enter a large amount of text.')),
                ('integer_field', models.IntegerField(help_text='Enter an integer.', verbose_name='Integer Field')),
                ('big_integer_field', models.BigIntegerField(help_text='Enter a large integer.', verbose_name='Big Integer Field')),
                ('positive_integer_field', models.PositiveIntegerField(help_text='Enter a positive integer.', verbose_name='Positive Integer Field')),
                ('positive_small_integer_field', models.PositiveSmallIntegerField(help_text='Enter a small positive integer.', verbose_name='Positive Small Integer Field')),
                ('small_integer_field', models.SmallIntegerField(help_text='Enter a small integer.', verbose_name='Small Integer Field')),
                ('boolean_field', models.BooleanField(default=False, help_text='Select True or False.', verbose_name='Boolean Field')),
                ('date_field', models.DateField(help_text='Select a date.', verbose_name='Date Field')),
                ('date_time_field', models.DateTimeField(help_text='Select a date and time.', verbose_name='Date Time Field')),
                ('time_field', models.TimeField(help_text='Select a time.', verbose_name='Time Field')),
                ('decimal_field', models.DecimalField(decimal_places=2, help_text='Enter a decimal number.', max_digits=5, verbose_name='Decimal Field')),
                ('float_field', models.FloatField(help_text='Enter a floating point number.', verbose_name='Float Field')),
                ('parent', models.ForeignKey(blank=True, help_text='The sample from which this sample was derived.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subsamples', to='samples.basesample', verbose_name='parent sample')),
            ],
            options={
                'verbose_name': 'Custom Sample',
                'verbose_name_plural': 'Custom Samples',
            },
            bases=('samples.basesample',),
        ),
        migrations.CreateModel(
            name='ExampleMeasurement',
            fields=[
                ('basemeasurement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='measurements.basemeasurement')),
                ('char_field', models.CharField(help_text='Enter a string of up to 200 characters.', max_length=200, verbose_name='Character Field')),
                ('text_field', django_bleach.models.BleachField(help_text='Enter a large amount of text.')),
                ('integer_field', models.IntegerField(help_text='Enter an integer.', verbose_name='Integer Field')),
                ('big_integer_field', models.BigIntegerField(help_text='Enter a large integer.', verbose_name='Big Integer Field')),
                ('positive_integer_field', models.PositiveIntegerField(help_text='Enter a positive integer.', verbose_name='Positive Integer Field')),
                ('positive_small_integer_field', models.PositiveSmallIntegerField(help_text='Enter a small positive integer.', verbose_name='Positive Small Integer Field')),
                ('small_integer_field', models.SmallIntegerField(help_text='Enter a small integer.', verbose_name='Small Integer Field')),
                ('boolean_field', models.BooleanField(default=False, help_text='Select True or False.', verbose_name='Boolean Field')),
                ('date_field', models.DateField(help_text='Select a date.', verbose_name='Date Field')),
                ('date_time_field', models.DateTimeField(help_text='Select a date and time.', verbose_name='Date Time Field')),
                ('time_field', models.TimeField(help_text='Select a time.', verbose_name='Time Field')),
                ('decimal_field', models.DecimalField(decimal_places=2, help_text='Enter a decimal number.', max_digits=5, verbose_name='Decimal Field')),
                ('float_field', models.FloatField(help_text='Enter a floating point number.', verbose_name='Float Field')),
                ('sample', models.ForeignKey(help_text='The sample on which the measurement was made.', on_delete=django.db.models.deletion.PROTECT, to='example.customsample', verbose_name='my custom sample')),
            ],
            options={
                'ordering': ['-modified'],
                'abstract': False,
            },
            bases=('measurements.basemeasurement',),
        ),
    ]
