# Generated by Django 4.2.11 on 2024-03-27 13:20

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_bleach.models
import geoluminate.contrib.core.models
import geoluminate.contrib.samples.choices
import imagekit.models.fields
import licensing.fields
import meta.models
import quantityfield.fields
import research_vocabs.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("licensing", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("literature", "0002_alter_literature_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Universally unique identifier for this record.",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "image",
                    imagekit.models.fields.ProcessedImageField(
                        blank=True,
                        default="world_map.webp",
                        help_text="Upload an image that represents your project.",
                        null=True,
                        upload_to=geoluminate.contrib.core.models.default_image_path,
                        verbose_name="image",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the object.",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="A short (max 512 characters) plain-language summary.",
                        max_length=512,
                        null=True,
                        verbose_name="summary",
                    ),
                ),
                (
                    "funding",
                    models.JSONField(
                        blank=True,
                        help_text="Related funding information.",
                        null=True,
                        verbose_name="funding",
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        help_text="Item options.",
                        null=True,
                        verbose_name="options",
                    ),
                ),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(0, "Private"), (1, "Public")],
                        default=0,
                        help_text="Visibility within the application.",
                        verbose_name="visibility",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who approved this dataset.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "license",
                    licensing.fields.LicenseField(
                        blank=True,
                        help_text="the license under which this content is published",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="licensing.license",
                        verbose_name="license",
                    ),
                ),
            ],
            options={
                "verbose_name": "dataset",
                "verbose_name_plural": "datasets",
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Universally unique identifier for this record.",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the location.",
                        max_length=255,
                        null=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "point",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "elevation",
                    quantityfield.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="Elevation with reference to mean sea level",
                        null=True,
                        unit_choices=["m", "ft"],
                        validators=[
                            django.core.validators.MaxValueValidator(9000),
                            django.core.validators.MinValueValidator(-12000),
                        ],
                        verbose_name="elevation",
                    ),
                ),
            ],
            options={
                "verbose_name": "location",
                "verbose_name_plural": "locations",
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Universally unique identifier for this record.",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "image",
                    imagekit.models.fields.ProcessedImageField(
                        blank=True,
                        default="world_map.webp",
                        help_text="Upload an image that represents your project.",
                        null=True,
                        upload_to=geoluminate.contrib.core.models.default_image_path,
                        verbose_name="image",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the object.",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="A short (max 512 characters) plain-language summary.",
                        max_length=512,
                        null=True,
                        verbose_name="summary",
                    ),
                ),
                (
                    "funding",
                    models.JSONField(
                        blank=True,
                        help_text="Related funding information.",
                        null=True,
                        verbose_name="funding",
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        help_text="Item options.",
                        null=True,
                        verbose_name="options",
                    ),
                ),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(0, "Private"), (1, "Public")],
                        default=0,
                        help_text="Visibility within the application.",
                        verbose_name="visibility",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Concept"),
                            (1, "Planning"),
                            (2, "In progress"),
                            (3, "Complete"),
                            (4, "Unknown"),
                        ],
                        default=0,
                        verbose_name="status",
                    ),
                ),
            ],
            options={
                "verbose_name": "project",
                "verbose_name_plural": "projects",
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Universally unique identifier for this record.",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created.",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last modified.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "image",
                    imagekit.models.fields.ProcessedImageField(
                        blank=True,
                        default="world_map.webp",
                        help_text="Upload an image that represents your project.",
                        null=True,
                        upload_to=geoluminate.contrib.core.models.default_image_path,
                        verbose_name="image",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the object.",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="A short (max 512 characters) plain-language summary.",
                        max_length=512,
                        null=True,
                        verbose_name="summary",
                    ),
                ),
                (
                    "funding",
                    models.JSONField(
                        blank=True,
                        help_text="Related funding information.",
                        null=True,
                        verbose_name="funding",
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        help_text="Item options.",
                        null=True,
                        verbose_name="options",
                    ),
                ),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(0, "Private"), (1, "Public")],
                        default=0,
                        help_text="Visibility within the application.",
                        verbose_name="visibility",
                    ),
                ),
                (
                    "status",
                    research_vocabs.fields.ConceptField(
                        choices=[
                            ("http://vocabulary.odm2.org/status/unknown", "Unknown"),
                            ("http://vocabulary.odm2.org/status/ongoing", "Ongoing"),
                            ("http://vocabulary.odm2.org/status/planned", "Planned"),
                            ("http://vocabulary.odm2.org/status/complete", "Complete"),
                        ],
                        default="unknown",
                        scheme=geoluminate.contrib.samples.choices.SampleStatus,
                        verbose_name="collection status",
                    ),
                ),
                (
                    "feature_type",
                    research_vocabs.fields.ConceptField(
                        choices=[
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/weatherStation",
                                "Weather station",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/observationWell",
                                "Observation well",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/fieldArea",
                                "Field area",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/streamGage",
                                "Stream gage",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/transect",
                                "Transect",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/soilPitSection",
                                "Soil pit section",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/scene",
                                "Scene",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/borehole",
                                "Borehole",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/interval",
                                "Interval",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/traverse",
                                "Traverse",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/ecologicalLandClassification",
                                "Ecological land classification",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/profile",
                                "Profile",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/shipsTrack",
                                "Ships track",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/crossSection",
                                "Cross section",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/specimen",
                                "Specimen",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/CTD",
                                "CTD",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/excavation",
                                "Excavation",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/flightline",
                                "Flightline",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/quadrat",
                                "Quadrat",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/trajectory",
                                "Trajectory",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/waterQualityStation",
                                "Water quality station",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/depthInterval",
                                "Depth interval",
                            ),
                            (
                                "http://vocabulary.odm2.org/samplingfeaturetype/site",
                                "Site",
                            ),
                        ],
                        default="site",
                        scheme=geoluminate.contrib.samples.choices.FeatureType,
                        verbose_name="feature type",
                    ),
                ),
                (
                    "medium",
                    research_vocabs.fields.ConceptField(
                        choices=[
                            ("http://vocabulary.odm2.org/medium/gas", "Gas"),
                            ("http://vocabulary.odm2.org/medium/soil", "Soil"),
                            (
                                "http://vocabulary.odm2.org/medium/liquidAqueous",
                                "Liquid aqueous",
                            ),
                            ("http://vocabulary.odm2.org/medium/air", "Air"),
                            ("http://vocabulary.odm2.org/medium/organism", "Organism"),
                            (
                                "http://vocabulary.odm2.org/medium/notApplicable",
                                "Not applicable",
                            ),
                            (
                                "http://vocabulary.odm2.org/medium/equipment",
                                "Equipment",
                            ),
                            (
                                "http://vocabulary.odm2.org/medium/particulate",
                                "Particulate",
                            ),
                            ("http://vocabulary.odm2.org/medium/mineral", "Mineral"),
                            ("http://vocabulary.odm2.org/medium/rock", "Rock"),
                            (
                                "http://vocabulary.odm2.org/medium/vegetation",
                                "Vegetation",
                            ),
                            (
                                "http://vocabulary.odm2.org/medium/liquidOrganic",
                                "Liquid organic",
                            ),
                            ("http://vocabulary.odm2.org/medium/tissue", "Tissue"),
                            ("http://vocabulary.odm2.org/medium/snow", "Snow"),
                            ("http://vocabulary.odm2.org/medium/other", "Other"),
                            ("http://vocabulary.odm2.org/medium/habitat", "Habitat"),
                            ("http://vocabulary.odm2.org/medium/regolith", "Regolith"),
                            ("http://vocabulary.odm2.org/medium/ice", "Ice"),
                            ("http://vocabulary.odm2.org/medium/unknown", "Unknown"),
                            ("http://vocabulary.odm2.org/medium/sediment", "Sediment"),
                        ],
                        default="solid",
                        scheme=geoluminate.contrib.samples.choices.SamplingMedium,
                        verbose_name="sampling medium",
                    ),
                ),
                (
                    "specimen_type",
                    research_vocabs.fields.ConceptField(
                        choices=[
                            (
                                "http://vocabulary.odm2.org/specimentype/corePiece",
                                "Core piece",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/individualSample",
                                "Individual sample",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/standardReferenceSpecimen",
                                "Standard reference specimen",
                            ),
                            ("http://vocabulary.odm2.org/specimentype/grab", "Grab"),
                            (
                                "http://vocabulary.odm2.org/specimentype/rockPowder",
                                "Rock powder",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/cuttings",
                                "Cuttings",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/dredge",
                                "Dredge",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/coreSection",
                                "Core section",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/coreSectionHalf",
                                "Core section half",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/coreQuarterRound",
                                "Core quarter round",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/forestFloorDigestion",
                                "Forest floor digestion",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/theSpecimenTypeIsUnknown",
                                "The specimen type is unknown",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/orientedCore",
                                "Oriented core",
                            ),
                            ("http://vocabulary.odm2.org/specimentype/other", "Other"),
                            (
                                "http://vocabulary.odm2.org/specimentype/litterFallDigestion",
                                "Litter fall digestion",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/coreSub-Piece",
                                "Core sub-piece",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/precipitationBulk",
                                "Precipitation bulk",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/automated",
                                "Automated",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/foliageDigestion",
                                "Foliage digestion",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/petriDishDryDeposition",
                                "Petri dish (dry deposition)",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/coreWholeRound",
                                "Core whole round",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/coreHalfRound",
                                "Core half round",
                            ),
                            ("http://vocabulary.odm2.org/specimentype/biota", "Biota"),
                            ("http://vocabulary.odm2.org/specimentype/core", "Core"),
                            (
                                "http://vocabulary.odm2.org/specimentype/terrestrialSection",
                                "Terrestrial section",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/foliageLeaching",
                                "Foliage leaching",
                            ),
                            (
                                "http://vocabulary.odm2.org/specimentype/thinSection",
                                "Thin section",
                            ),
                        ],
                        default="theSpecimenTypeIsUnknown",
                        scheme=geoluminate.contrib.samples.choices.SpecimenType,
                        verbose_name="specimen type",
                    ),
                ),
                (
                    "description",
                    django_bleach.models.BleachField(
                        blank=True, help_text="A description of the sample.", null=True
                    ),
                ),
                (
                    "comment",
                    django_bleach.models.BleachField(
                        blank=True,
                        help_text="General comments regarding the site and/or measurement",
                        null=True,
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        help_text="The dataset to which this sample belongs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="samples",
                        to="geoluminate.dataset",
                        verbose_name="dataset",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="The location of the sample.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="samples",
                        to="geoluminate.location",
                        verbose_name="location",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent sample",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geoluminate.sample",
                        verbose_name="parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Heat Flow Site",
                "verbose_name_plural": "Heat Flow Site",
                "ordering": ["created"],
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.AddField(
            model_name="dataset",
            name="project",
            field=models.ForeignKey(
                blank=True,
                help_text="The project that this dataset belongs to.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="datasets",
                to="geoluminate.project",
                verbose_name="project",
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="reference",
            field=models.OneToOneField(
                blank=True,
                help_text="The data publication to which this dataset belongs. If the dataset has not been formally published, leave this field blank.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="literature.literature",
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="related_literature",
            field=models.ManyToManyField(
                blank=True,
                help_text="Any literature that is related to this dataset.",
                related_name="related_datasets",
                related_query_name="related_dataset",
                to="literature.literature",
            ),
        ),
    ]
