# Generated by Django 3.2.14 on 2022-07-08 15:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import sortedm2m.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.CharField(blank=True, max_length=64, null=True)),
                ('given', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'verbose_name': 'author',
                'verbose_name_plural': 'authors',
                'db_table': 'publication_author',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications_uuidtaggeditem_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications_uuidtaggeditem_items', to='taggit.tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf', models.FileField(blank=True, null=True, upload_to='publications/')),
                ('DOI', models.CharField(blank=True, max_length=128, null=True, unique=True, verbose_name='DOI')),
                ('URL', models.URLField(blank=True, max_length=128, null=True, unique=True, verbose_name='URL')),
                ('label', models.CharField(blank=True, max_length=64, unique=True)),
                ('type', models.CharField(blank=True, max_length=64, null=True)),
                ('container_title', models.CharField(blank=True, max_length=128, null=True, verbose_name='journal/book title')),
                ('title', models.CharField(blank=True, max_length=512, null=True)),
                ('published', models.DateField(blank=True, null=True)),
                ('issue', models.CharField(blank=True, max_length=16, null=True, verbose_name='issue')),
                ('volume', models.CharField(blank=True, max_length=16, null=True, verbose_name='issue')),
                ('page', models.CharField(blank=True, max_length=16, null=True)),
                ('is_referenced_by_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='cited by')),
                ('language', models.CharField(blank=True, max_length=16, null=True)),
                ('source', models.CharField(blank=True, default='User Upload', max_length=128)),
                ('abstract', models.TextField(blank=True)),
                ('bibtex', models.TextField(blank=True, null=True)),
                ('author', sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, related_name='publications', sort_value_field_name='position', to='publications.Author')),
                ('keywords', taggit.managers.TaggableManager(blank=True, help_text=None, through='publications.UUIDTaggedItem', to='taggit.Tag', verbose_name='key words')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publications', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
                ('verified_by', models.ManyToManyField(blank=True, related_name='verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'publication',
                'verbose_name_plural': 'publications',
                'db_table': 'publications',
                'ordering': ['-published'],
                'abstract': False,
            },
        ),
    ]
